#!/usr/bin/env bash

function deploy_challenge {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    # This hook is called once for every domain that needs to be
    # validated, including any alternative names you may have listed.
    #
    # Parameters:
    # - DOMAIN
    #   The domain name (CN or subject alternative name) being
    #   validated.
    # - TOKEN_FILENAME
    #   The name of the file containing the token to be served for HTTP
    #   validation. Should be served by your web server as
    #   /.well-known/acme-challenge/${TOKEN_FILENAME}.
    # - TOKEN_VALUE
    #   The token value that needs to be served for validation. For DNS
    #   validation, this is what you want to put in the _acme-challenge
    #   TXT record. For HTTP validation it is the value that is expected
    #   be found in the $TOKEN_FILENAME file.
}

function clean_challenge {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    # This hook is called after attempting to validate each domain,
    # whether or not validation was successful. Here you can delete
    # files or DNS records that are no longer needed.
    #
    # The parameters are the same as for deploy_challenge.
}

function deploy_cert {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}" TIMESTAMP="${6}"

    echo " +++ deploy_cert hook +++"
    date

    echo "About to push up cert for $DOMAIN"
    echo "Cert will be called $DOMAIN-$TIMESTAMP"

    SERVER_CERTIFICATE=$(aws iam upload-server-certificate --server-certificate-name $DOMAIN-$TIMESTAMP --certificate-body file://$CERTFILE --private-key file://$KEYFILE --certificate-chain file://$CHAINFILE)

    <% if @elb %>
    echo "Replacing cert on Elastic Load Balancer <%= @elb['elastic_load_balancer_name'] %>"

    # Get the old certificate ARN before it is removed from the Elastic Load Balancer.
    ELB=$(aws elb describe-load-balancers --load-balancer-name <%= @elb['elastic_load_balancer_name'] %>)
    if [[ $ELB =~ arn:aws:iam::[0-9]*:server-certificate/($DOMAIN-[0-9]*) ]]; then
      echo "Old server certificate ARN is ${BASH_REMATCH[1]}"
      OLD_SERVER_CERTIFICATE=${BASH_REMATCH[1]}
    fi

    # Use the new certificate ARN to tell the Elastic Load Balancer to update.
    if [[ $SERVER_CERTIFICATE =~ (arn:aws:iam::[0-9]*:server-certificate/$DOMAIN-[0-9]*) ]]; then
      echo "Replacing cert on ELB with ${BASH_REMATCH[1]}"
      sleep 30 # Wait for the new cert to become available.
      aws elb set-load-balancer-listener-ssl-certificate --load-balancer-name <%= @elb['elastic_load_balancer_name'] %> --load-balancer-port 443 --ssl-certificate-id ${BASH_REMATCH[1]}
    fi

    # Delete the old certificate now it is not being used.
    echo "Deleting $OLD_SERVER_CERTIFICATE"
    sleep 30 # Wait for the new cert to take over.
    aws iam delete-server-certificate --server-certificate-name $OLD_SERVER_CERTIFICATE

    <% else %>
    echo "There is no Elastic Load Balancer, so the certificate cannot be replaced"
    <% end %>

    echo " +++ deploy_cert hook done +++"

    # This hook is called once for each certificate that has been
    # produced. Here you might, for instance, copy your new certificates
    # to service-specific locations and reload the service.
    #
    # Parameters:
    # - DOMAIN
    #   The primary domain name, i.e. the certificate common
    #   name (CN).
    # - KEYFILE
    #   The path of the file containing the private key.
    # - CERTFILE
    #   The path of the file containing the signed certificate.
    # - FULLCHAINFILE
    #   The path of the file containing the full certificate chain.
    # - CHAINFILE
    #   The path of the file containing the intermediate certificate(s).
    # - TIMESTAMP
    #   Timestamp when the specified certificate was created.
}

function unchanged_cert {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}"

    echo " +++ undhancged_cert hook +++"
    date
    echo " +++ undhancged_cert hook done +++"

    # This hook is called once for each certificate that is still
    # valid and therefore wasn't reissued.
    #
    # Parameters:
    # - DOMAIN
    #   The primary domain name, i.e. the certificate common
    #   name (CN).
    # - KEYFILE
    #   The path of the file containing the private key.
    # - CERTFILE
    #   The path of the file containing the signed certificate.
    # - FULLCHAINFILE
    #   The path of the file containing the full certificate chain.
    # - CHAINFILE
    #   The path of the file containing the intermediate certificate(s).
}

HANDLER=$1; shift; $HANDLER $@
